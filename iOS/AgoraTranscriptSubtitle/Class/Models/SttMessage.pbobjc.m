// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SttMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SttMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(SttTranslation);
GPBObjCClassDeclaration(SttWord);

#pragma mark - SttMessageRoot

@implementation SttMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SttMessageRoot_FileDescriptor

static GPBFileDescriptor *SttMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Agora.SpeechToText"
                                                 objcPrefix:@"Stt"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SttText

@implementation SttText

@dynamic vendor;
@dynamic version;
@dynamic seqnum;
@dynamic uid;
@dynamic flag;
@dynamic time;
@dynamic lang;
@dynamic starttime;
@dynamic offtime;
@dynamic wordsArray, wordsArray_Count;
@dynamic endOfSegment;
@dynamic durationMs;
@dynamic dataType;
@dynamic transArray, transArray_Count;
@dynamic culture;
@dynamic textTs;

typedef struct SttText__storage_ {
  uint32_t _has_storage_[1];
  int32_t vendor;
  int32_t version;
  int32_t seqnum;
  int32_t flag;
  int32_t lang;
  int32_t starttime;
  int32_t offtime;
  int32_t durationMs;
  NSMutableArray *wordsArray;
  NSString *dataType;
  NSMutableArray *transArray;
  NSString *culture;
  int64_t uid;
  int64_t time;
  int64_t textTs;
} SttText__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "vendor",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Vendor,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SttText__storage_, vendor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SttText__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "seqnum",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Seqnum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SttText__storage_, seqnum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Uid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SttText__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "flag",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Flag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SttText__storage_, flag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Time,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SttText__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lang",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Lang,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SttText__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "starttime",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Starttime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SttText__storage_, starttime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "offtime",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Offtime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SttText__storage_, offtime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wordsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SttWord),
        .number = SttText_FieldNumber_WordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SttText__storage_, wordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endOfSegment",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_EndOfSegment,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "durationMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_DurationMs,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SttText__storage_, durationMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_DataType,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SttText__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SttTranslation),
        .number = SttText_FieldNumber_TransArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SttText__storage_, transArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "culture",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_Culture,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SttText__storage_, culture),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textTs",
        .dataTypeSpecific.clazz = Nil,
        .number = SttText_FieldNumber_TextTs,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(SttText__storage_, textTs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SttText class]
                                     rootClass:[SttMessageRoot class]
                                          file:SttMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SttText__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SttWord

@implementation SttWord

@dynamic text;
@dynamic startMs;
@dynamic durationMs;
@dynamic isFinal;
@dynamic confidence;

typedef struct SttWord__storage_ {
  uint32_t _has_storage_[1];
  int32_t startMs;
  int32_t durationMs;
  NSString *text;
  double confidence;
} SttWord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = SttWord_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SttWord__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SttWord_FieldNumber_StartMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SttWord__storage_, startMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "durationMs",
        .dataTypeSpecific.clazz = Nil,
        .number = SttWord_FieldNumber_DurationMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SttWord__storage_, durationMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isFinal",
        .dataTypeSpecific.clazz = Nil,
        .number = SttWord_FieldNumber_IsFinal,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = SttWord_FieldNumber_Confidence,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SttWord__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SttWord class]
                                     rootClass:[SttMessageRoot class]
                                          file:SttMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SttWord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SttTranslation

@implementation SttTranslation

@dynamic isFinal;
@dynamic lang;
@dynamic textsArray, textsArray_Count;

typedef struct SttTranslation__storage_ {
  uint32_t _has_storage_[1];
  NSString *lang;
  NSMutableArray *textsArray;
} SttTranslation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isFinal",
        .dataTypeSpecific.clazz = Nil,
        .number = SttTranslation_FieldNumber_IsFinal,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lang",
        .dataTypeSpecific.clazz = Nil,
        .number = SttTranslation_FieldNumber_Lang,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SttTranslation__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SttTranslation_FieldNumber_TextsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SttTranslation__storage_, textsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SttTranslation class]
                                     rootClass:[SttMessageRoot class]
                                          file:SttMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SttTranslation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
