// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: LrcTime.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum MsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownType // = 0
  case lrcTime // = 1001
  case UNRECOGNIZED(Int)

  init() {
    self = .unknownType
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownType
    case 1001: self = .lrcTime
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownType: return 0
    case .lrcTime: return 1001
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [MsgType] = [
    .unknownType,
    .lrcTime,
  ]

}

struct LrcTime: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: MsgType = .unknownType

  var forward: Bool = false

  var ts: Int64 = 0

  var songID: String = String()

  var uid: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_TYPE"),
    1001: .same(proto: "LRC_TIME"),
  ]
}

extension LrcTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LrcTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "forward"),
    3: .same(proto: "ts"),
    4: .same(proto: "songId"),
    5: .same(proto: "uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.forward) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.ts) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.songID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.uid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknownType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.forward != false {
      try visitor.visitSingularBoolField(value: self.forward, fieldNumber: 2)
    }
    if self.ts != 0 {
      try visitor.visitSingularInt64Field(value: self.ts, fieldNumber: 3)
    }
    if !self.songID.isEmpty {
      try visitor.visitSingularStringField(value: self.songID, fieldNumber: 4)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt32Field(value: self.uid, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LrcTime, rhs: LrcTime) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.forward != rhs.forward {return false}
    if lhs.ts != rhs.ts {return false}
    if lhs.songID != rhs.songID {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
