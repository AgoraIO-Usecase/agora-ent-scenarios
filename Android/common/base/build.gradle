plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

if (project.property("AGORA_APP_ID").toString().isEmpty() ||
        project.property("AGORA_APP_CERTIFICATE").toString().isEmpty()) {
    throw new GradleException("请在 gradle.properties 中配置完整的 Agora ID 和 Certificate")
}

def versionCtrl = new File(rootProject.projectDir.absolutePath + File.separator + "versionCtrl.properties")
def properties = new Properties()
if (versionCtrl.exists()) {
    versionCtrl.withReader('UTF-8') { reader ->
        properties.load(reader)
    }
}
final def VERSION_SCENE_VOICE = properties.getProperty("VERSION_SCENE_VOICE")
final def VERSION_SCENE_SPATIAL_VOICE = properties.getProperty("VERSION_SCENE_SPATIAL_VOICE")
final def VERSION_SCENE_KTV = properties.getProperty("VERSION_SCENE_KTV")
final def VERSION_SCENE_SHOW = properties.getProperty("VERSION_SCENE_SHOW")

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        flavorDimensions ""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        buildConfigField "String", "APP_VERSION_NAME", "\"${APP_VERSION_NAME}\""
        buildConfigField "String", "APP_VERSION_CODE", "\"${APP_VERSION_CODE}\""
        buildConfigField "String", "VERSION_SCENE_VOICE", "\"${VERSION_SCENE_VOICE}\""
        buildConfigField "String", "VERSION_SCENE_SPATIAL_VOICE", "\"${VERSION_SCENE_SPATIAL_VOICE}\""
        buildConfigField "String", "VERSION_SCENE_KTV", "\"${VERSION_SCENE_KTV}\""
        buildConfigField "String", "VERSION_SCENE_SHOW", "\"${VERSION_SCENE_SHOW}\""

        buildConfigField "String", "SERVER_HOST", "\"${SERVER_HOST}\""
        buildConfigField "String", "TOOLBOX_SERVER_HOST", "\"${TOOLBOX_SERVER_HOST}\""

        buildConfigField "String", "AGORA_APP_ID", "\"${AGORA_APP_ID}\""
        buildConfigField "String", "AGORA_APP_CERTIFICATE", "\"${AGORA_APP_CERTIFICATE}\""

        buildConfigField "String", "IM_APP_KEY", "\"${IM_APP_KEY}\""
        buildConfigField "String", "IM_APP_CLIENT_ID", "\"${IM_APP_CLIENT_ID}\""
        buildConfigField "String", "IM_APP_CLIENT_SECRET", "\"${IM_APP_CLIENT_SECRET}\""

        buildConfigField "String", "CLOUD_PLAYER_KEY", "\"${CLOUD_PLAYER_KEY}\""
        buildConfigField "String", "CLOUD_PLAYER_SECRET", "\"${CLOUD_PLAYER_SECRET}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.deps.appcompat
    api rootProject.ext.deps.multidex
    implementation rootProject.ext.deps.annotation
    implementation rootProject.ext.deps.eventbus
    implementation rootProject.ext.deps.material

    kapt rootProject.ext.deps.arouter_kapt
    implementation rootProject.ext.deps.arouter
    api rootProject.ext.deps.rxjava2
    api rootProject.ext.deps.rxandroid2
    api rootProject.ext.deps.okhttp
    api rootProject.ext.deps.okhttp_logger
    api rootProject.ext.deps.retrofit2
    api rootProject.ext.deps.retrofit2_adapter
    api rootProject.ext.deps.gson
    implementation rootProject.ext.deps.autosize

    implementation rootProject.ext.deps.logger

    kapt rootProject.ext.deps.glide_compiler
    implementation rootProject.ext.deps.glide

    implementation rootProject.ext.deps.coroutines_android


    api rootProject.ext.deps.rtm
    api rootProject.ext.deps.rtc
    api rootProject.ext.deps.ok2curl
}
