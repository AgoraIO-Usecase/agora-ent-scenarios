plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

if (project.property("AGORA_APP_ID").toString().isEmpty()) {
    throw new GradleException("请在 gradle.properties 中配置完整的 Agora ID 和 Certificate")
}

def baseProps = new File(rootProject.projectDir.absolutePath + File.separator + "gradle.properties")
def properties = new Properties()
if (baseProps.exists()) {
    baseProps.withReader('UTF-8') { reader ->
        properties.load(reader)
    }
}
final def USE_LOCAL_SDK = properties.getProperty("USE_LOCAL_SDK").toBoolean()

def localsdkPath = "agora-sdk"
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        flavorDimensions ""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        buildConfigField "String", "APP_VERSION_NAME", "\"${APP_VERSION_NAME}\""
        buildConfigField "String", "APP_VERSION_CODE", "\"${APP_VERSION_CODE}\""

        buildConfigField "String", "SERVER_HOST", "\"${SERVER_HOST}\""
        buildConfigField "String", "TOOLBOX_SERVER_HOST", "\"${TOOLBOX_SERVER_HOST}\""
        buildConfigField "String", "ROOM_MANAGER_SERVER_HOST", "\"${ROOM_MANAGER_SERVER_HOST}\""
        buildConfigField "String", "TOOLBOX_SERVER_HOST_DEV", "\"${TOOLBOX_SERVER_HOST_DEV}\""
        buildConfigField "String", "AI_CHAT_SERVER_HOST", "\"${AI_CHAT_SERVER_HOST}\""
        buildConfigField "String", "AI_CHAT_SERVER_HOST_DEV", "\"${AI_CHAT_SERVER_HOST_DEV}\""

        buildConfigField "String", "AGORA_APP_ID", "\"${AGORA_APP_ID}\""
        buildConfigField "String", "AGORA_APP_CERTIFICATE", "\"${AGORA_APP_CERTIFICATE}\""

        buildConfigField "String", "RESTFUL_API_KEY", "\"${RESTFUL_API_KEY}\""
        buildConfigField "String", "RESTFUL_API_SECRET", "\"${RESTFUL_API_SECRET}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (USE_LOCAL_SDK) {
        sourceSets {
            main {
                jniLibs.srcDirs += "${localsdkPath}"
            }
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.deps.appcompat
    api rootProject.ext.deps.multidex
    implementation rootProject.ext.deps.annotation
    implementation rootProject.ext.deps.eventbus
    implementation rootProject.ext.deps.material
    implementation rootProject.ext.deps.recyclerview

    kapt rootProject.ext.deps.arouter_kapt
    implementation rootProject.ext.deps.arouter
    api rootProject.ext.deps.rxjava2
    api rootProject.ext.deps.rxandroid2
    api rootProject.ext.deps.okhttp
    api rootProject.ext.deps.okhttp_logger
    api rootProject.ext.deps.retrofit2
    api rootProject.ext.deps.retrofit2_adapter
    api rootProject.ext.deps.retrofit2_gson
    api rootProject.ext.deps.gson
    implementation rootProject.ext.deps.autosize

    implementation rootProject.ext.deps.logger

    kapt rootProject.ext.deps.glide_compiler
    implementation rootProject.ext.deps.glide

    implementation rootProject.ext.deps.coroutines_android


    if (USE_LOCAL_SDK) {
        api fileTree(dir: "${localsdkPath}", include: ['*.jar'])
    } else {
        api rootProject.ext.deps.rtc
    }

    api rootProject.ext.deps.rtm
    api rootProject.ext.deps.ok2curl

    api rootProject.ext.deps.protobuf_java
    api rootProject.ext.deps.protobuf_java_util
}
