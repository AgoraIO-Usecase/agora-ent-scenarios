ext {
    voice_is_modular = false
}
apply from: "${rootProject.getRootDir().absolutePath}/modular.gradle"

Properties properties = new Properties()
properties.load(project.file('voice_gradle.properties').newDataInputStream())
def final isBuildTypesTest = properties.getProperty('isBuildTypesTest')
def final TEST_RTC_APP_ID = properties.getProperty('AGORA_APP_ID_TEST')
def final TEST_RTC_APP_TOKEN = properties.getProperty('AGORA_APP_TOKEN_TSET')
def final TEST_IM_APP_KEY = properties.getProperty('IM_APP_KEY_TEST')
def final TEST_APP_SERVER_HOST = properties.getProperty('IM_APP_HOST_TEST')
def final RELEASE_RTC_APP_ID = properties.getProperty('AGORA_APP_ID_RELEASE')
def final RELEASE_RTC_APP_TOKEN = properties.getProperty('AGORA_APP_TOKEN_RELEASE')
def final RELEASE_IM_APP_KEY = properties.getProperty('IM_APP_KEY_RELEASE')
def final RELEASE__APP_SERVER_HOST = properties.getProperty('IM_APP_HOST_RELEASE')

android {

    defaultConfig {
        if(voice_is_modular){
            applicationId "io.agora.scenes.voice"
            buildConfigField "Boolean", "is_modular", "${true}"
        }else {
            buildConfigField "Boolean", "is_modular", "${false}"
        }
        if (isBuildTypesTest.toBoolean()){
            buildConfigField "String", "agora_app_id", "${TEST_RTC_APP_ID}"
            buildConfigField "String", "agora_app_token", "${TEST_RTC_APP_TOKEN}"
            buildConfigField "String", "im_app_key", "${TEST_IM_APP_KEY}"
            buildConfigField "String", "server_host", "${TEST_APP_SERVER_HOST}"
        }else {
            buildConfigField "String", "agora_app_id", "${RELEASE_RTC_APP_ID}"
            buildConfigField "String", "agora_app_token", "${RELEASE_RTC_APP_TOKEN}"
            buildConfigField "String", "im_app_key", "${RELEASE_IM_APP_KEY}"
            buildConfigField "String", "server_host", "${RELEASE__APP_SERVER_HOST}"
        }

        ndk {
            // 设置支持的SO库架构
            abiFilters 'arm64-v8a' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    sourceSets {
        main {
            // 独立调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (voice_is_modular) {
                manifest.srcFile 'src/main/moduleManifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    dataBinding{
        enabled = true
    }
}

dependencies {
    if (!isModular()){
        implementation project(":common:base")
    }
    implementation project(":scenes:voice:baseui")
    implementation project(":scenes:voice:buddy")
    implementation project(':scenes:voice:imkit')
    implementation project(':scenes:voice:network')
    implementation project(':scenes:voice:rtckit')
    implementation project(':scenes:voice:SVGAPlayer')

    kapt rootProject.ext.deps.arouter_kapt
    implementation rootProject.ext.deps.arouter

    kapt rootProject.ext.deps.glide_compiler
    implementation rootProject.ext.deps.glide

    implementation rootProject.ext.deps.annotation
    implementation rootProject.ext.deps.appcompat
    implementation rootProject.ext.deps.lifecycle
    implementation rootProject.ext.deps.fragment_ktx
    implementation rootProject.ext.deps.core_ktx
    implementation rootProject.ext.deps.constraintlayout
    implementation rootProject.ext.deps.recyclerview
    implementation rootProject.ext.deps.material

    implementation rootProject.ext.deps.bugly
    implementation rootProject.ext.deps.gson
    implementation rootProject.ext.deps.easypermissions
}